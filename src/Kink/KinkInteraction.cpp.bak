// system includes
#include <fstream>

// boost includes
#include <boost/log/core.hpp>
#include <boost/log/trivial.hpp>
#include <boost/log/expressions.hpp>

// B2 includes
#include <B2Reader.hh>
#include <B2SpillSummary.hh>
#include <B2ClusterSummary.hh>
#include <B2TrackSummary.hh>
#include <B2EventSummary.hh>
#include <B2VertexSummary.hh>
#include <B2HitSummary.hh>
#include <B2Enum.hh>
#include <B2Pdg.hh>

// MCs includes
#include <McsConst.hpp>
#include <McsClass.hpp>
#include <McsFunction.hpp>

// root includes
#include <TVector3.h>

// my includes
#include "MyFunction.hpp"

namespace logging = boost::log;
namespace fs = boost::filesystem;

bool CompareParticlePdg(std::vector<const B2EmulsionSummary*> lhs, std::vector<const B2EmulsionSummary*> rhs) {
  if (std::abs(lhs.at(0)->GetParentTrack().GetParticlePdg()) != std::abs(rhs.at(0)->GetParentTrack().GetParticlePdg()))
    return std::abs(lhs.at(0)->GetParentTrack().GetParticlePdg()) < std::abs(rhs.at(0)->GetParentTrack().GetParticlePdg());
  return false;
}

bool ComparePlate(const B2EmulsionSummary *lhs, const B2EmulsionSummary *rhs) {
  if (lhs->GetPlate() != rhs->GetPlate()) return lhs->GetPlate() < rhs->GetPlate();
  return false;
}

int main (int argc, char *argv[]) {

  logging::core::get()->set_filter
    (
     // logging::trivial::severity >= logging::trivial::debug
      logging::trivial::severity >= logging::trivial::info
     );

  if ( argc != 3 ) {
    BOOST_LOG_TRIVIAL(error) << "Usage : " << argv[0]
			     << " <input B2 file name> <output file name>";
    std::exit(1);
  }

  BOOST_LOG_TRIVIAL(info) << "==========Start==========";

  const fs::path input_file(argv[1]);

  try {

    B2Reader reader(input_file);

    std::ofstream ofs(argv[2], std::ios::binary);
    Momentum_recon::Mom_chain mom_chain;
    Momentum_recon::Mom_basetrack mom_basetrack;
    std::pair<Momentum_recon::Mom_basetrack, Momentum_recon::Mom_basetrack> mom_basetrack_pair;

    while ( reader.ReadNextSpill() > 0 ) {
      auto &spill_summary = reader.GetSpillSummary();

      // Get muon track id
      int muon_track_id = -2;
      std::vector<int> ninja_hit_side_id, ninja_hit_top_id;
      std::vector<int> bm_hit_side_id, bm_hit_top_id;
      auto it_event = spill_summary.BeginTrueEvent();
      const auto *event = it_event.Next();
      double norm = event->GetNormalization();
      auto &primary_vertex_summary = event->GetPrimaryVertex();
      int vertex_ecc = GetInteractionEcc(primary_vertex_summary);
      double total_cross_section = primary_vertex_summary.GetTotalCrossSection();
      auto it_outgoing_track = primary_vertex_summary.BeginTrack();

      while ( const auto *track = it_outgoing_track.Next() ) {
	
	if ( !track->HasDetector(B2Detector::kNinja) &&
	     !track->HasDetector(B2Detector::kBabyMind) ) continue;

	if ( B2Pdg::IsMuonPlusOrMinus(track->GetParticlePdg()) ) {
	  muon_track_id = track->GetTrackId();
	  // Get scintillator hit id of true muon track
	  auto it_cluster = track->BeginCluster();
	  const auto *cluster = it_cluster.Next();
	  auto it_hit = cluster->BeginHit();
	  while ( const auto *hit = it_hit.Next() ) {
	    if ( hit->GetDetectorId() == B2Detector::kBabyMind ) {
	      if ( hit->GetView() == B2View::kSideView )
		bm_hit_side_id.push_back(hit->GetHitId());
	      else if ( hit->GetView() == B2View::kTopView )
		bm_hit_top_id.push_back(hit->GetHitId());
	    }
	    if ( hit->GetDetectorId() == B2Detector::kNinja ) {
	      if ( hit->GetView() == B2View::kSideView )
		ninja_hit_side_id.push_back(hit->GetHitId());
	      else if ( hit->GetView() == B2View::kTopView )
		ninja_hit_top_id.push_back(hit->GetHitId());
	    }
	  }
	  break;
	}
      }

      if ( muon_track_id < 0 ) continue;
      BOOST_LOG_TRIVIAL(debug) << "Muon track id is positive.";

      // Check muon id & collect basetracks
      Bool_t muon_detect_flag = false;
      Bool_t iss_detect_flag = false;
      Bool_t oss_detect_flag = false; 
      Bool_t bm_nt_connect_flag = false;

      std::vector<const B2EmulsionSummary*> emulsions;
      auto it_emulsion = spill_summary.BeginEmulsion();
      while ( const auto *emulsion = it_emulsion.Next() ) {
	if ( emulsion->GetParentTrackId() == 0 ) continue;
	if ( emulsion->GetEcc() != vertex_ecc ) continue;
	if ( emulsion->GetFilmType() == B2EmulsionType::kECC ) {
	  if ( emulsion->GetPlate() == 0 || emulsion->GetPlate() == 1 ) {
	    iss_detect_flag = true;
	  }
	  else {
	    emulsions.push_back(emulsion);
	  }
	}
	else if ( emulsion->GetFilmType() == B2EmulsionType::kShifter ) {
	  if ( emulsion->GetPlate() == 0 ) {
	    oss_detect_flag = true;
	  }
	}
	else continue;
      }

      if ( emulsions.empty() ) continue;
      BOOST_LOG_TRIVIAL(debug) << "Emulsion hits found.";


      auto it_recon_vertex = spill_summary.BeginReconVertex();
      int num_bm_side_hit_in_recon_track = 0;
      int num_bm_top_hit_in_recon_track = 0;
      int num_ninja_side_hit_in_recon_track = 0;
      int num_ninja_top_hit_in_recon_track = 0;
      while ( auto *vertex = it_recon_vertex.Next() ) {
	auto it_outgoing_track = vertex->BeginTrack();
	while ( auto *track = it_outgoing_track.Next() ) {
	  // Check if muon is correctly connected between BM and NT
	  auto it_hit = track->BeginHit();
	  while ( const auto hit = it_hit.Next() ) {
	    if ( hit->GetDetectorId() == B2Detector::kBabyMind ) {
	      if ( hit->GetView() == B2View::kSideView ) {
		if ( std::find(bm_hit_side_id.begin(),
			       bm_hit_side_id.end(),
			       hit->GetHitId()) != bm_hit_side_id.end() ) {
		BOOST_LOG_TRIVIAL(debug) << "Baby MIND side hit found in recon track";
		num_bm_side_hit_in_recon_track++;
		}
	      }
	      else if ( hit->GetView() == B2View::kTopView ) {
		if ( std::find(bm_hit_top_id.begin(),
			       bm_hit_top_id.end(),
			       hit->GetHitId()) != bm_hit_top_id.end() ) {
		BOOST_LOG_TRIVIAL(debug) << "Baby MIND top hit found in recon track";
		num_bm_top_hit_in_recon_track++;
		}		
	      }
	    }
	    else if ( hit->GetDetectorId() == B2Detector::kNinja ) {
	      if ( hit->GetView() == B2View::kSideView ) {
		if ( std::find(ninja_hit_side_id.begin(),
			       ninja_hit_side_id.end(),
			       hit->GetHitId()) != ninja_hit_side_id.end() ) {
		  BOOST_LOG_TRIVIAL(debug) << "NINJA side hit found in recon track";
		  num_ninja_side_hit_in_recon_track++;
		}
	      }
	      else if ( hit->GetView() == B2View::kTopView ) {
		if ( std::find(ninja_hit_top_id.begin(),
			       ninja_hit_top_id.end(),
			       hit->GetHitId()) != ninja_hit_top_id.end() ) {
		  BOOST_LOG_TRIVIAL(debug) << "NINJA top hit found in recon track";
		  num_ninja_top_hit_in_recon_track++;
		}
	      }
	    }
	  }
	}
      }

      if ( num_bm_side_hit_in_recon_track > 2 &&
	   num_bm_top_hit_in_recon_track > 2 &&
	   num_ninja_side_hit_in_recon_track > 1 &&
	   num_ninja_top_hit_in_recon_track > 1 )
	bm_nt_connect_flag = true;

      muon_detect_flag = iss_detect_flag && oss_detect_flag && bm_nt_connect_flag;
      
      if ( !muon_detect_flag ) continue;
      BOOST_LOG_TRIVIAL(debug) << "Found correctly connected muon track : " << reader.GetEntryNumber();

      // Sort emulsion basetracks

      std::vector<std::vector<const B2EmulsionSummary* > > emulsion_chains;
      Int_t track_id_tmp_ = emulsions.at(0)->GetParentTrackId();
      std::vector<const B2EmulsionSummary* > one_chain;
      for ( int iemulsion = 0; iemulsion < emulsions.size(); iemulsion++ ) {
	if ( emulsions.at(iemulsion)->GetParentTrackId() == track_id_tmp_) {
	  one_chain.push_back(emulsions.at(iemulsion));
	}
	else {
	  emulsion_chains.push_back(one_chain);
	  one_chain.clear();
	  track_id_tmp_ = emulsions.at(iemulsion)->GetParentTrackId();
	  one_chain.push_back(emulsions.at(iemulsion));
	}
      }
      emulsion_chains.push_back(one_chain);

      std::sort(emulsion_chains.begin(), emulsion_chains.end(), CompareParticlePdg);

      if ( emulsion_chains.at(0).at(0)->GetParentTrack().GetParticlePdg() != 13 ) continue;

      for ( auto one_particle_emulsions : emulsion_chains ) {

	std::sort(one_particle_emulsions.begin(), one_particle_emulsions.end(), ComparePlate);

	int num_base = one_particle_emulsions.size();
	int num_link = num_base - 1;
	std::cout << num_base << " " << num_link << std::endl;
	if ( num_base < 2 ) continue;

	mom_chain.base.clear();
	mom_chain.base_pair.clear();
	mom_chain.base.reserve(num_base);
	mom_chain.base_pair.reserve(num_link);

	mom_chain.groupid = reader.GetEntryNumber();
	mom_chain.chainid = one_particle_emulsions.at(0)->GetParentTrackId();
	mom_chain.unixtime = -1;
	mom_chain.tracker_track_id = muon_track_id;
	mom_chain.entry_in_daily_file = reader.GetEntryNumber();
	mom_chain.stop_flag = 0;
	mom_chain.particle_flag = one_particle_emulsions.at(0)->GetParentTrack().GetParticlePdg();
	mom_chain.bm_range_mom = one_particle_emulsions.at(0)->GetParentTrack().GetInitialAbsoluteMomentum().GetValue();
	mom_chain.bm_curvature_mom = norm * total_cross_section * 1e-38 * 6.02e23;

	Double_t downstream_position_z = 0;
	
	for ( auto emulsion : one_particle_emulsions ) {
	  TVector3 position = emulsion->GetAbsolutePosition().GetValue();
	  CalcPosInEccCoordinate(position, vertex_ecc, kTRUE);
	  SmearPosition(position);
	  TVector3 tangent = emulsion->GetTangent().GetValue();
	  tangent = (1./tangent.Z()) * tangent;
	  SmearTangentVector(tangent);

	  mom_basetrack.pl = emulsion->GetPlate() + 1;
	  mom_basetrack.rawid = emulsion->GetEmulsionTrackId();
	  mom_basetrack.x = position.X();
	  mom_basetrack.y = position.Y();
	  mom_basetrack.z = position.Z();
	  mom_basetrack.ax = tangent.X();
	  mom_basetrack.ay = tangent.Y();
	  mom_basetrack.m[0].zone = 0;
	  mom_basetrack.m[0].view = 0;
	  mom_basetrack.m[0].imager = 0;
	  mom_basetrack.m[0].ph = std::min((int)((emulsion->GetEdepSum() + emulsion->GetEdepDiff()) * 1000 / 2), 9999);
	  mom_basetrack.m[0].pixelnum = 0;
	  mom_basetrack.m[0].hitnum = 0;
	  mom_basetrack.m[1].zone = 0;
	  mom_basetrack.m[1].view = 0;
	  mom_basetrack.m[1].imager = 0;
	  mom_basetrack.m[1].ph = std::min((int)((emulsion->GetEdepSum() - emulsion->GetEdepDiff()) * 1000 / 2), 9999);
	  mom_basetrack.m[1].pixelnum = 0;
	  mom_basetrack.m[1].hitnum = 0;	  

	  mom_chain.base.push_back(mom_basetrack);

	  mom_basetrack_pair.first = mom_basetrack_pair.second;
	  mom_basetrack_pair.first.z = 0.;
	  mom_basetrack_pair.second.pl = emulsion->GetPlate() + 1;
	  mom_basetrack_pair.second.rawid = emulsion->GetEmulsionTrackId();
	  mom_basetrack_pair.second.x = position.X();
	  mom_basetrack_pair.second.y = position.Y();
	  mom_basetrack_pair.second.z = position.Z() - downstream_position_z;
	  mom_basetrack_pair.second.ax = tangent.X();
	  mom_basetrack_pair.second.ay = tangent.Y();
	  if ( emulsion != one_particle_emulsions.front() ) {
	    mom_chain.base_pair.push_back(mom_basetrack_pair);
	  }

	  downstream_position_z = position.Z();

	} // emulsion

	std::cout << "Write Momchain Header function called" << std::endl;
	Momentum_recon::WriteMomChainHeader(ofs, mom_chain);
	for ( int ibase = 0; ibase < num_base; ibase++ ) {
	  ofs.write((char*)& mom_chain.base.at(ibase), sizeof(Momentum_recon::Mom_basetrack));
	}
	for ( int ilink = 0; ilink < num_link; ilink++ ) {
	  ofs.write((char*)& mom_chain.base_pair.at(ilink).first, sizeof(Momentum_recon::Mom_basetrack));
	  ofs.write((char*)& mom_chain.base_pair.at(ilink).second, sizeof(Momentum_recon::Mom_basetrack));
	}

      } // one particle emulsions

    } // reader

    ofs.close();

  } catch (const std::runtime_error &error) {
    BOOST_LOG_TRIVIAL(fatal) << "Runtime error : " << error.what();
    std::exit(1);
  } catch (const std::invalid_argument &error) {
    BOOST_LOG_TRIVIAL(fatal) << "Invalid argument error : " << error.what();
    std::exit(1);
  } catch (const std::out_of_range &error) {
    BOOST_LOG_TRIVIAL(fatal) << "Out of range error : " << error.what();
    std::exit(1);
  }

  BOOST_LOG_TRIVIAL(info) << "==========Finish==========";
  std::exit(0);

}
